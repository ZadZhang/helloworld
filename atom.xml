<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZadZhang</title>
  
  
  <link href="https://zhangzejia.com/atom.xml" rel="self"/>
  
  <link href="https://zhangzejia.com/"/>
  <updated>2021-08-01T13:31:59.546Z</updated>
  <id>https://zhangzejia.com/</id>
  
  <author>
    <name>ZadZhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cookie With Session</title>
    <link href="https://zhangzejia.com/2021/08/01/Cookie/"/>
    <id>https://zhangzejia.com/2021/08/01/Cookie/</id>
    <published>2021-08-01T12:28:23.000Z</published>
    <updated>2021-08-01T13:31:59.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>我们都知道浏览器和服务器之间通过http协议进行通信，但是这种协议是<strong>无状态</strong>的，所以就导致了服务器无法获知是谁在访问，但是一些网页明显需要获知到底是谁在访问（例如某宝）所以为了解决这个问题先后出现了四种技术，分别是：<strong>隐藏表单域</strong>、<strong>URL重写</strong>、<strong>cookie</strong>、<strong>session</strong>。</p><h2 id="什么是-cookie、session"><a href="#什么是-cookie、session" class="headerlink" title="什么是 cookie、session"></a>什么是 cookie、session</h2><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p><code>Cookie</code>是某些网站为了辨别用户身份，进行<strong>会话</strong>跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cookie 的获取及添加</span></span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie();</span><br><span class="line">resp.addCookie(cookie);</span><br><span class="line">Cookie[] cookies = req.getCookies();</span><br><span class="line">cookie.getName();</span><br><span class="line">cookie.getValue();</span><br><span class="line">cookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>); <span class="comment">// 设置存活时间的一天</span></span><br></pre></td></tr></table></figure><p><strong>cookie 比较重要的属性</strong></p><ul><li>NAME/VALUE: cookie通过键对值来存储</li><li>Expires: 过期时间</li></ul><p>浏览器对于Cookie的一些限制</p><ul><li>一个Cookie只能保存一个信息</li><li>一个web站点可以给浏览器发送多个cookie,最多存放20个人cookie</li><li>cookie 有大小限制4kb</li><li>300个cookie浏览器上限</li></ul><p>删除cookie</p><ul><li>设置cookie的存活时间为<strong>0</strong>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">cookie.setPath(request.getContextPath());</span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure></li></ul><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p><code>session</code>称为会话信息，位于web服务器上，主要负责访问者与网站之间的交互，当访问浏览器请求http地址时，将传递到web服务器上并与访问信息进行匹配， 当关闭网站时就表示会话已经结束，网站无法访问该信息了，所以它无法保存永久数据，我们无法访问以及禁用网站。</p><p>这里关闭网站时消失的是服务器分配给浏览器的<code>cookie</code>,一个<code>JSESSIONID</code>,服务器上数据是不会消失的。</p><ul><li>设置 session  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session = req.getSession();</span><br><span class="line">session.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;IDEA&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (session.isNew())&#123;</span><br><span class="line">resp.getWriter().write(<span class="string">&quot;session创建成功，ID：&quot;</span>+ session.getId());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">resp.getWriter().write(<span class="string">&quot;session已经在浏览器中存在了，ID：&quot;</span> + session.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>获取 session  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session = req.getSession();</span><br><span class="line">String name = (String) session.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>销毁 session  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session = req.getSession();</span><br><span class="line">session.removeAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">session.invalidate();</span><br></pre></td></tr></table></figure></li></ul><h3 id="cookie、-session的异同"><a href="#cookie、-session的异同" class="headerlink" title="cookie、 session的异同"></a>cookie、 session的异同</h3><ul><li>Cookie 是把用户的数据给写给用户的浏览器，浏览器保存。</li><li>Session 是把用户的数据写到用户独占Session中，服务端保存（保存重要的信息，减少服务器资源浪费）。</li><li>Session对象由服务创建。</li></ul>]]></content>
    
    
    <summary type="html">cookie 与 session 的爱恨纠葛hh</summary>
    
    
    
    <category term="计算机网路" scheme="https://zhangzejia.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E8%B7%AF/"/>
    
    
    <category term="Cookie" scheme="https://zhangzejia.com/tags/Cookie/"/>
    
    <category term="Session" scheme="https://zhangzejia.com/tags/Session/"/>
    
    <category term="浏览器存值" scheme="https://zhangzejia.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>HEXO博客备份</title>
    <link href="https://zhangzejia.com/2021/07/24/Blog%E5%A4%87%E4%BB%BD/"/>
    <id>https://zhangzejia.com/2021/07/24/Blog%E5%A4%87%E4%BB%BD/</id>
    <published>2021-07-24T04:46:48.000Z</published>
    <updated>2021-07-24T07:13:17.320Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>少年不知备份好啊，突然心血来潮将电脑系统重做了，自信满满的将一些文件copy到了u盘里（^_^）,此时的我还沉浸在“新电脑”的狂喜之中。一天之后准备记录一下最近的学习和生活，没料到拷贝到的文件有丢失(QAQ)。导致只能重新建站。</p><p>所以在这里记录一下备份博客的全过程。</p><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><h4 id="瞅瞅我们需要备份的文件"><a href="#瞅瞅我们需要备份的文件" class="headerlink" title="瞅瞅我们需要备份的文件"></a>瞅瞅我们需要备份的文件</h4><p>一下是备份的目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── db.json</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── public</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">└── themes</span><br><span class="line">    └── Butterfly</span><br></pre></td></tr></table></figure><p>以上文件中的内容分别为：</p><ol><li><code>_config.yml</code>文件: hexo 的配置文件，主题等插件配置需要在该文件中修改。</li><li><code>node_modules</code>文件夹: 这个就不过多解释了，依赖的包都在该文件夹中。</li><li><code>package,json</code>文件: 所有依赖的包信息都写在这里。</li><li><code>packge-lock.json</code>文件: 依赖模块安装记录。详情见：<img src="https://www.npmjs.cn/files/package-locks/" alt="npm-package-locks"></li><li><code>public</code>文件夹: 包含一些生成的网页静态文件。</li><li><code>scaffolds</code>文件夹: 包含创建的文章、分类、标签界面的模板。博客的定制修改会对模板进行修改。<br>7， <code>source</code> 文件夹: 我们的心血都在这里。</li><li><code>themes</code> 文件夹: 其中butterfly是我们的主题。</li></ol><p>参考Hexo 初始化官方的备份列表。仓库地址为<img src="https://github.com/hexojs/hexo-starter" alt="hexojs/hexo-starter"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scaffolds</span><br><span class="line">source</span><br><span class="line">themes</span><br><span class="line">.gitignore</span><br><span class="line">.gitmodules</span><br><span class="line">_config.yml</span><br><span class="line">package.json</span><br></pre></td></tr></table></figure><p>对比一下，它丢弃了：</p><ol><li><code>node_modules</code> &amp; <code>package-lock.json</code>,这两部分的内容，只要保留<code>package.json</code>,执行<code>npm install</code>安装即可。</li><li><code>public</code>文件夹通过执行<code>hexo g</code>就可以生成网页内容。<br>可以重新生成的文件都可以不上传，因为使用特定命令就可以将其恢复。 </li></ol><p>它增加了 .gitmodules，那它的作用又是什么呢？其实 hexojs/hexo-starter 是通过 Git 的 Submodule 功能来下载主题模块，本身仓库并不备份主题文件。考虑下我们需要如何备份主题文件目录，有两个方案：</p><ol><li>一个方案是将其内容全部上传进行备份，这样可以保证原主题的更新不会影响你原先配置的效果。</li><li>另一个方案是像 hexo-starter 仓库一样通过 Git 的 Submodule 功能来管理，这样可以进行主题的更新。</li></ol><p>这里我选择第一种方式，如需后续更新配置文件则需要手动更新。<br>最终备份文件列表如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scaffolds</span><br><span class="line">source</span><br><span class="line">themes</span><br><span class="line">.gitignore</span><br><span class="line">.gitmodules</span><br><span class="line">_config.yml</span><br><span class="line">package.json</span><br></pre></td></tr></table></figure><h4 id="备份流程"><a href="#备份流程" class="headerlink" title="备份流程"></a>备份流程</h4><ol><li><p>先修改 .gitignore 文件，查看之后由于原文件已经忽略了 public 和 node_modules 文件夹，因此仅需要添加 package-lock.json 到忽略清单中。</p></li><li><p>我们可以删除不使用的主题或者把主题路径添加到忽略列表中。</p></li><li><p>创建 themes_custom/butterfly 文件夹，将对主题进行的配件修改的文件拷贝一份到这里</p></li><li><p>执行以下命令，在本地创建备份仓库：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cd blog-bak</span><br><span class="line">$ git init</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit - m &quot;blog-bak&quot;</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">hexo butterfly 个人博客备份记录</summary>
    
    
    
    <category term="blog" scheme="https://zhangzejia.com/categories/blog/"/>
    
    
    <category term="博客" scheme="https://zhangzejia.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="hexo" scheme="https://zhangzejia.com/tags/hexo/"/>
    
  </entry>
  
</feed>
